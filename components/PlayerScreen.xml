<?xml version="1.0" encoding="UTF-8"?>


<component name="PlayerScreen" extends="Group" initialFocus="video">
    <interface>
        <field id="card" type="assocarray" onChange="cardSet" />
        <field id="done" type="bool" alwaysNotify="true" />
        <field id="progress" type="integer" alwaysNotify="true" />
        <field id="seek" type="integer" /> <!-- Must be set before card -->
        <!-- <field id="doStop" type="bool" onChange="stopPlayback" /> -->
        <function name="stopPlayback" />
    </interface>

    <script type = "text/brightscript" uri = "pkg:/source/utils.brs" />
    <script type = "text/brightscript" uri = "pkg:/source/decrypt.brs" />
    <script type="text/brightscript">
        <![CDATA[
			Sub init()
				m.top.setFocus(true)
			    m.video = m.top.findNode("video")
                m.FetcherTask = createObject("roSGNode", "FetcherTask")

                m.top.done = false
                m.top.progress = 0
                ' m.top.doStop = false

                m.video.ObserveField("state", "stateChange")

                m.dialog = m.top.findNode("dialog")
            End Sub

            Sub stateChange()
                print "State: " + m.video.state
                m.top.progress = m.video.position

                print "Progress: " + m.top.progress.ToStr()
                print "Urn: " + m.top.card.Urn
                if m.global.DoesExist("savetask") and m.global.savetask <> Invalid
                    ' itemSelected = m.list.itemSelected
                    obj = m.top.card
                    print "Update progress. Urn: " + obj.Urn
                    if m.global.savetask.data.DoesExist(obj.Urn) and m.global.savetask.data[obj.Urn] = m.top.progress.ToStr() or m.top.progress = 0
                        print "Progress has not changed or 0, ignoring"
                    else
                        d = m.global.savetask.data
                        d.AddReplace(obj.Urn, m.top.progress.ToStr())
                        m.global.savetask.data = d
                        m.global.savetask.task = "save"
                        m.global.savetask.Control = "RUN"
                    end if
                end if
            end Sub

            Function stopPlayback()
                print "Stop playback"
                m.video.control = "stop"
            end Function

            Sub rowListContentChanged()
                print "ContentUpdate"
                m.RowList.content = m.LoadTask.content
			end Sub
            
            function unique(arr as Object)
                res = []
                table = {}
                for i = 0 to arr.Count() - 1
                    k = arr[i].toStr().Split(":")
                    print "Looking at"
                    ? k
                    if k.Count() > 2 and table.doesExist(k[2])
                        print "Already exist " ; table[k[2]]
                        res.Delete(table[k[2]])
                    end if
                    res.push(arr[i])
                    if k.Count() > 2
                        table[k[2]] = res.Count() - 1
                    end if
                end for
                return res
            end function

            Sub cardSet()
                print "cardSet"
                ? m.top.card

                if m.global.DoesExist("savetask") and m.global.savetask <> Invalid
                    obj = m.top.card
                    print "Update progress. Urn: " + obj.Urn
                    last = ""
                    if m.global.savetask.data.DoesExist("last")
                        last = m.global.savetask.data["last"]
                    end if

                    ? last
                    last_array = []
                    if last.Trim().Len() > 0
                        last_array = last.Split(";")
                    end if
                    ? last_array

                    urn = ""
                    if obj.DoesExist("Urn")
                        urn = "object:" + obj.Urn.EncodeUriComponent()
                    end if
                    if obj.DoesExist("SeriesUrn")
                        urn = urn + ":" + obj.SeriesUrn.EncodeUriComponent()
                    end if
                    'if obj.DoesExist("SeriesUrn")
                    '    urn = "series:" + obj.SeriesUrn.EncodeUriComponent()
                    'else if obj.DoesExsit("SeasonUrn")
                    '    urn = "season:" + obj.SeasonUrn.EncodeUriComponent()
                    'end if
                    for i = 0 to last_array.Count() - 1
                        if last_array[i] = urn
                            last_array.Delete(i)
                        end if
                    end for
                    if urn.Len() > 0
                        last_array.Push(urn)
                        last_array = unique(last_array)
                        ? last_array
                        if last_array.Count() > 10
                            last_array.shift()
                        end if
                        ? last_array
                        last = ""
                        for i = 0 to last_array.Count() - 1
                            if last.Len() > 0
                                last.appendString(";", 1)
                            end if
                            last = last + last_array[i]
                        end for
                        print "Last:"
                        ? last

                        d = m.global.savetask.data
                        d.AddReplace("last", last)
                        m.global.savetask.data = d
                        m.global.savetask.task = "save"
                        m.global.savetask.Control = "RUN"
                    else
                        print "No urn?"
                    end if
                end if

                m.FetcherTask.url = m.top.card.PrimaryAsset.Uri
                m.FetcherTask.observeField("result", "play")
                m.FetcherTask.control = "RUN"
            end Sub

            Sub play()
                print "play"
                ? m.FetcherTask.result
                item = createObject("RoSGNode", "ContentNode")

                ' Try to find HLS stream
                for i = 0 to m.FetcherTask.result.Links.Count() - 1
                    if m.FetcherTask.result.Links[i].Target = "HLS"
                        item.Url = decrypt(m.FetcherTask.result.Links[i].EncryptedUri, m.global.seed)
                        item.streamFormat = m.FetcherTask.result.Links[i].Target
                    end if
                end for
                ' Fallback to what ever was first in the list
                if Len(item.Url) = 0 and m.FetcherTask.result.Links.Count() > 0
                    item.Url = decrypt(m.FetcherTask.result.Links[0].EncryptedUri, m.global.seed)
                    item.streamFormat = m.FetcherTask.result.Links[0].Target
                end if

                ? item.Url
                item.Title = m.top.card.SeriesTitle + " - " + m.top.card.Title
                item.Description = m.top.card.Subtitle
                item.HDPosterUrl = m.top.card.PrimaryImageUri
                'item.Url = link
                'item.SubtitleUrl = ""
                'subTracks = []
                'if m.FetcherTask.result.DoesExist("SubtitlesList")
                '    ? m.FetcherTask.result.SubtitlesList
                '    for i = 0 to m.FetcherTask.result.SubtitlesList.Count() - 1
                '    'for each sub in m.FetcherTask.result.SubtitlesList
                '        if Len(item.SubtitleUrl) = 0
                '            item.SubtitleUrl = m.FetcherTask.result.SubtitlesList[i].Uri
                '        else
                '            item.SubtitleUrl += ";" + m.FetcherTask.result.SubtitlesList[i].Uri
                '        end if
                '        subTracks.Push({Language: m.FetcherTask.result.SubtitlesList[i].Language, Description: m.FetcherTask.result.SubtitlesList[i].Type})
                '    end for
                'end if
                'item.SubtitleTracks = subTracks
                ? item
                m.video.content = item
                if m.top.seek <> 0
                    m.dialog.visible = true
                    m.dialog.title = "Fortsæt eller start forfra?"
                    m.dialog.buttons = ["Fortsæt (" + MillisecondsToString(m.top.seek*1000) + ")", "Start forfra"]
                    m.dialog.setFocus(true)
                    m.dialog.observeField("buttonSelected", "onDialogSelect")
                else
                    m.video.control = "play"
                end if
            end Sub

            sub onDialogSelect()
                ? m.dialog.buttonSelected
                m.dialog.visible = false
                m.video.control = "play"
                if m.dialog.buttonSelected = 0 and m.top.seek <> 0
                    print "Seek to: " + m.top.seek.ToStr()
                    m.video.seek = m.top.seek
                end if
                m.video.SetFocus(true)
            end sub
            ]]>
    </script>
    <children>
        <Video
			id = "video"
			translation = "[0,0]"
			width = "1920"
			height = "1080"
			enableUI = "true"
			loop = "false"
		/>
        <RowList
            id="rowList"
            translation="[231,100]"
            itemComponentName="PosterItem"
            itemSize="[1458,254]"
            numRows="5"
            rowItemSize="[[1220,591],[351,197]]"
	    	rowHeights="[648,254]"
            rowItemSpacing="[[54,0],[18,0]]"
            rowLabelOffset="[[0,8]]"
            showRowLabel="[true]"
            showRowCounter="[true]" 
            focusXOffset="[119,0]"
	    	rowFocusAnimationStyle = "floatingFocus"/> 
        <Dialog id="dialog"
            title="foo"
            visible="false">
        </Dialog>
    </children>
</component>

