<?xml version="1.0" encoding="UTF-8"?>

<component name="StartScene" extends="Scene" initialFocus="rowList">
    <script type = "text/brightscript" uri = "pkg:/source/utils.brs" />
    <script type = "text/brightscript" uri = "pkg:/source/decrypt.brs" />
    <script type="text/brightscript">
        <![CDATA[
			Sub init()
                print "StartScene.xml init"
                m.global.settings = {}
                m.top.setFocus(true)
                m.RowList = m.top.findNode("rowList")
                m.last_seen_objs = []

                if m.SaveTask = invalid
                    m.SaveTask = createObject("roSGNode", "SaveTask")
                    m.global.addFields({savetask : m.SaveTask})

                    m.SaveTask.task = "load"
                    m.SaveTask.observeField("data", "dataLoaded")
                    m.SaveTask.control = "RUN"
                end if
            End Sub

            sub lastLoaded()
                Print "Loaded this:"
                ? m.FetcherTask.result
                foundItem = false
                item = {}
                meta = {}
                if m.FetcherTask.result.DoesExist("Items") and m.FetcherTask.result["Items"].Count() > 0
                    item = m.FetcherTask.result["Items"][0]
                    meta.description = item.Title
                    foundItem = true
                else if m.FetcherTask.result.DoesExist("Type") and m.FetcherTask.result.Type = "ProgramCard"
                    item = m.FetcherTask.result
                    meta.description = item.Title
                    foundItem = true
                else
                    print "Unknown type?"
                    ? m.FetcherTask.result
                end if
                if foundItem = true
                    meta.hdBackgroundImageUrl = item.PrimaryImageUri
                    meta.HDPosterUrl = item.PrimaryImageUri
                    node = createObject("RoSGNode","ContentNode")
                    node.SetFields(meta)
                    m.last_seen_row.appendChild(node)
                    m.last_seen_objs.push(item)
                    m.programCards[0].Push(item)
                end if
                loadLast()
            end sub

            sub loadLast()
                Print "Load next " + m.last_array.Count().ToStr()
                if m.last_array.Count() > 0
                    item = m.last_array.pop().Split(":")
                    if not item.Count() <= 3 and not item.Count >= 2
                        print "Error loading item:"
                        ? item
                        loadLast()
                    end if
                    print "Type: " + item[0]
                    if item[0] = "series"
                        m.FetcherTask = createObject("roSGNode", "FetcherTask")
                        m.FetcherTask.observeFieldScoped("result", "lastLoaded")
                        m.FetcherTask.url = "https://www.dr.dk/mu-online/api/1.4/list/view/seasons?id=" + item[1].DecodeUriComponent() + "&limit=1&offset=0"
                        m.FetcherTask.control = "RUN"
                    else if item[0] = "object"
                        m.FetcherTask = createObject("roSGNode", "FetcherTask")
                        m.FetcherTask.observeFieldScoped("result", "lastLoaded")
                        m.FetcherTask.url = "https://www.dr.dk/mu-online/api/1.4/programcard/" + item[1].DecodeUriComponent()
                        m.FetcherTask.control = "RUN"
                    end if
                else
                    print "Done loading last"
                end if
            end sub

            sub dataLoaded()
                m.SaveTask.unobserveField("data")
                m.FetcherTask = createObject("roSGNode", "FetcherTask")
                fetchFront()
            end sub

            sub fetchFront()
                print "Fetch front"
                m.FetcherTask.url = "https://www.dr.dk/mu-online/api/1.4/page/tv/front"
                m.FetcherTask.observeFieldScoped("result", "frontLoaded")
                m.FetcherTask.control = "RUN"

                print "Data loaded"
                success = false
                if m.SaveTask.data.DoesExist("seed") and m.SaveTask.data.seed <> ""
                    m.global.seed = m.SaveTask.data.seed
                    res = decrypt("0100000320ec19f8bfd2f4968a91982a14ba6e405476105a6160cb62b94ded4d1f47836402d0d837fb378e874d1b20f6680a9de56c520a2ef59b98ea7d120bc94453305cfce057ad1df24e15f646670b2842c0bbf5dd61c3377c9f98bad371ed70e5a03aee51cab6af8c5f624d4aac25bb910cee3ede05c183019adc8255c796d2843ecfc5ffb14ffcc9966527016c8a9145fb1a83ba919199587b308a940b6270cd4c1c03795b5bb464c17d251a223aa93a3693a3d701baf2af934a6cbb9bb9e0a22a1d9adcb501982854c42e443435e7e66606be526033ae70595d9bf683f5eb0b37dbafb98d20b228b4a7a15bb1377119013ac25155a067699804e1161b3ad8c3143a1cef8602ba93b992f36894daec18a43e4ede9fcc753db2dc373cb9755d0f941356c430c737c9da05082a20102b570388eaea78522c86b2f47150bdc5aff8984932bb7ca22cb872d6e5751b2f31e27456f78dbb3624469e9f9884ce6f6136ea5f1ee69efd6627b0ce954d15579f5e50c80db66e229b3520883e5f42291c3697a699daed4cb642367fcec3b7df82f459504176fa3a3dd81e8db4a26e6ae20d138085", m.global.seed)
                    print "Result:"
                    print res
                    if res <> ""
                        success = true
                        print "succ"
                    else
                        print "fail"
                    end if
                end if

                if success = false
                    keyboarddialog = createObject("roSGNode", "KeyboardDialog")
                    keyboarddialog.backgroundUri = "pkg:/images/rsgde_dlg_bg_hd.9.png"
                    keyboarddialog.title = "Indtast DR token"
                    keyboarddialog.buttons = ["Gem"]
                    keyboarddialog.observeField("buttonSelected", "onKeyboardButtonSelected")
                    keyboarddialog.text = m.global.seed
                    m.top.dialog = keyboarddialog
                    m.global.seed = ""
                end if
            end sub

            sub onKeyboardButtonSelected()
                if m.top.dialog.buttonSelected = 0 then
                    m.SaveTask.task = "save"
                    m.SaveTask.data = {seed : m.top.dialog.text}
                    m.SaveTask.Control = "RUN"
                    m.top.dialog.close = true
                end if
            end sub

            sub doSearch()
                m.CurrentScreen = CreateObject("RoSGNode", "SearchScreen")
                m.searchWord = m.top.dialog.text
                m.CurrentScreen.searchWord = m.searchWord
                m.top.AppendChild(m.CurrentScreen)
                m.CurrentScreen.SetFocus(true)
                m.top.dialog.close = true
            end sub

            sub listItemSelected()
                selectedItem = m.RowList.rowItemSelected[1]
                rowItem = m.RowList.rowItemSelected[0]
                colItem = m.RowList.rowItemSelected[1]
                print "-- selected item "; rowItem; " "; colItem

                if (rowItem >= 0) and (rowItem < m.programCards.Count()) and colItem >= 0 and colItem < m.programCards[rowItem].Count()
                    m.RowList.visible = false
                    
                    obj = m.programCards.GetEntry(rowItem).GetEntry(colItem)
                    print "Selected object type: " obj.type
                    if obj.type = "Bundle"
                        print "Bundle type: " + obj.BundleType
                        if obj.BundleType = "Season"
                            m.CurrentScreen = CreateObject("RoSGNode", "SeasonScreen")
                        else
                            m.CurrentScreen = CreateObject("RoSGNode", "SeriesScreen")
                        end if
                        m.CurrentScreen.obj = obj
                    else if obj.type = "ProgramCard"
                        m.CurrentScreen = CreateObject("RoSGNode", "SeriesScreen")
                        m.CurrentScreen.obj = obj
                    else if obj.type = "letter"
                        print "Letter type " + m.FetcherTask.control
                        m.CurrentScreen = CreateObject("RoSGNode", "ListScreen")
                        m.CurrentScreen.obj = obj
                    else if obj.type = "search"
                        print "Search"
                        keyboarddialog = createObject("roSGNode", "KeyboardDialog")
                        keyboarddialog.backgroundUri = "pkg:/images/rsgde_dlg_bg_hd.9.png"
                        keyboarddialog.title = "Indtast søgeord"
                        keyboarddialog.buttons = ["Søg"]
                        keyboarddialog.observeField("buttonSelected", "doSearch")
                        keyboarddialog.text = m.searchWord
                        m.top.dialog = keyboarddialog
                        return
                    else
                        print "Wrong type! " + obj.type
                        return
                    end if

                    m.CurrentScreen.id = "CURRENT_TEST"
                    m.top.AppendChild(m.CurrentScreen)
                    m.CurrentScreen.SetFocus(true)
                end if
            end sub

            function onKeyEvent(key as String, press as Boolean) as Boolean
                print "in StartScene.xml onKeyEvent ";key;" "; press
                if press then
                    if key = "back"
                        if not (m.CurrentScreen = invalid)
                            print "StartScreen CLEANING UP m.CurrentScreen"
                            rowItem = m.RowList.rowItemSelected[0]
                            colItem = m.RowList.rowItemSelected[1]
                            obj = m.programCards.GetEntry(rowItem).GetEntry(colItem)
                            if obj.type = "ProgramCard"
                                m.CurrentScreen.callFunc("stopPlayback")
                            end if
                            m.top.RemoveChild(m.CurrentScreen)
                            m.CurrentScreen = invalid

                            m.RowList.visible = true
                            m.RowList.SetFocus(true)

                            if m.last_seen_row <> invalid
                                m.last_seen_row = createObject("RoSGNode","ContentNode")
                                m.RowList.content.replaceChild(m.last_seen_row, 0)
                                beginLoadLast()
                            end if

                            return true
                        end if
                    else if key = "home"
                        m.top.RemoveChild(m.CurrentScreen)
                        m.CurrentScreen = invalid
                    end if

                end if
                return false
            end function

            sub addProgramCard(items as object, title as string) as object
                row = createObject("RoSGNode","ContentNode")
                row.title = title
                cards = []
                for each item in items
                    meta = {}
                    meta.description = item.Title 'GenerateTitle(item.SeriesTitle, item.Title)
                    meta.hdBackgroundImageUrl = item.PrimaryImageUri
                    meta.HDPosterUrl = item.PrimaryImageUri
                    node = createObject("RoSGNode","ContentNode")
                    node.SetFields(meta)
                    row.appendChild(node)
                    cards.push(item)
                end for
                m.programCards.Push(cards)

                return row
            end sub

            sub addZone(zone as object) as object
                row = createObject("RoSGNode","ContentNode")
                row.title = zone.Title
                cards = []
                for each item in zone.Items
                    meta = {}
                    meta.description = item.Title
                    meta.hdBackgroundImageUrl = item.PrimaryImageUri
                    meta.HDPosterUrl = item.PrimaryImageUri
                    node = createObject("RoSGNode","ContentNode")
                    node.SetFields(meta)
                    row.appendChild(node)
                    cards.push(item)
                end for
                m.programCards.Push(cards)

                return row
            end sub

            sub addLetters(alphabet as object, startIdx as Integer, stopIdx as Integer) as object
                row = createObject("RoSGNode","ContentNode")
                row.title = "Programmer " + UCase(alphabet[startIdx]) + " - " + UCase(alphabet[stopIdx])
                cards = []
                'for each item in items
                i = startIdx
                while i <= stopIdx
                    meta = {}
                    isLetter = true
                    searchStr = alphabet[i] ' Find programs starting with this letter
                    if alphabet[i].Len() = 1
                        meta.description = "Programmer med " + UCase(alphabet[i])
                    else if alphabet[i] = "0-9"
                        searchStr = "0..9" ' This searches in ranges
                        meta.description = "Programmer med " + UCase(alphabet[i])
                    else
                        isLetter = false
                        meta.description = UCase(alphabet[i])
                    end if
                    meta.title = UCase(alphabet[i])
                    meta.HDPosterUrl = "pkg://images/button_bg.png"
                    node = createObject("RoSGNode", "ContentNode")
                    node.SetFields(meta)
                    row.appendChild(node)
                    item = {}
                    if isLetter
                        item.type = "letter"
                        item.letter = searchStr
                    else
                        item.type = "search"
                    end if
                    cards.push(item)
                    i++
                end while
                'end for
                m.programCards.Push(cards)

                return row
            end sub

            sub frontLoaded()
                print "Front loaded"
                m.testCard = m.FetcherTask.result.TopSpots.Items[0]

                m.testComponents = createObject("RoArray", 3, true)
                m.programCards = []

                listContent = createObject("RoSGNode", "ContentNode")

                if m.global.DoesExist("savetask") and m.global.savetask <> Invalid and m.global.savetask.data.DoesExist("last") and m.global.savetask.data["last"].Len() > 0
                    m.last_seen_row = createObject("RoSGNode","ContentNode")
                    m.last_seen_row.title = "Sidst set"
                    listContent.appendChild(m.last_seen_row)
                    ' Add placeholder for "last seen"
                    m.programCards.Push([])
                end if

                ' No longer populated
                ' row = addProgramCard(m.FetcherTask.result.TopSpots.Items, "Top indhold")
                ' listContent.appendChild(row)

                if m.FetcherTask.result.DoesExist("Zones1")
                    for each zone in m.FetcherTask.result.Zones1
                        row = addZone(zone)
                        listContent.appendChild(row)
                    end for
                end if

                row = addProgramCard(m.FetcherTask.result.News.Items, "Nyheder")
                listContent.appendChild(row)

                row = addProgramCard(m.FetcherTask.result.LastChance.Items, "Sidste chance")
                listContent.appendChild(row)

                listContent = loadAlphabet(listContent)

                m.RowList.content = listContent
                print "TestComponents"; m.testComponents

                m.RowList.ObserveField("itemSelected", "listItemSelected")

                ' set focus on the Scene (which will set focus on the initialFocus node)
                print "SETTING THE FOCUS"
                m.top.setFocus(true)
                print "AFTER SETTING THE FOCUS"

                beginLoadLast()
            end sub

            sub beginLoadLast()
                if m.global.DoesExist("savetask") and m.global.savetask <> Invalid and m.global.savetask.data.DoesExist("last")
                    m.last_array = m.global.savetask.data["last"].Split(";")
                    ? m.last_array
                    loadLast()
                end if
            end sub

            sub loadAlphabet(listContent as object) as object
                alphabet = ["a", "b", "c", "d", "e", ' 4
                            "f", "g", "h", "i", "j", ' 9
                            "k", "l", "m", "n", "o", ' 14
                            "p", "q", "r", "s", "t", ' 19
                            "u", "v", "w", "x", "y", ' 24
                            "z", "æ", "ø", "å", "0-9", '29
                            "Søg"] ' 30
                row = addLetters(alphabet, 0, 4) ' a-e
                listContent.appendChild(row)
                row = addLetters(alphabet, 5, 9) ' f-j
                listContent.appendChild(row)
                row = addLetters(alphabet, 10, 14) ' k-o
                listContent.appendChild(row)
                row = addLetters(alphabet, 15, 19) ' p-t
                listContent.appendChild(row)
                row = addLetters(alphabet, 20, 24) ' u-y
                listContent.appendChild(row)
                row = addLetters(alphabet, 25, 29) ' z-å
                listContent.appendChild(row)
                row = addLetters(alphabet, 30, 30)
                listContent.appendChild(row)

                return listContent
            end sub

            Sub rowListContentChanged()
                'print "ContentUpdate"
                'm.RowList.content = m.LoadTask.content
            end Sub]]>
    </script>
    <children>
        <RowList
            id="rowList"
            translation="[0,100]"
            itemComponentName="ButtonItem"
            itemSize="[1920,254]"
            numRows="5"
            rowItemSize="[[1220,591],[351,197]]"
            rowHeights="[648,254]"
            rowItemSpacing="[[54,0],[18,0]]"
            itemSpacing="[100,70]"
            focusXOffset="[350,47]"
            rowLabelOffset="[[47,8]]"
            showRowLabel="[true]"
            showRowCounter="[true]" 
            rowFocusAnimationStyle = "floatingFocus"/> 
    </children>
</component>
